Forward

The test cases for this program have already been provided for you.  Do not modify any of the code in the main function nor the function signatures.  Doing so will result in an automatic zero for that part of the assignment.

It is suggested that you don't start working in the provided test file immediately.  Create your own, separate project to debug your functions in first, then implement them in the test file to see if they're correct.

Note that pseudocode is not workable code- if you are proficient in a language then you should have no trouble translating it effectively.  Pseudocode follows no set syntax nor naming convention.  Just because you're translating pseudocode does not mean you should neglect your chosen language's formatting and naming conventions!

Here are the files for each language:

    Assignment4.cs 

Download Assignment4.cs

    LinkedList.cs 

    Download LinkedList.cs

Assignment4.java
Download Assignment4.java

    LinkedList.java 

    Download LinkedList.java

Assignment4.cpp
Download Assignment4.cpp

    linked_list.h 

        Download linked_list.h

 
Part 1: Binary Merge (10 pts)

A foundational function in studying data structures, Binary Merge is a function used to merge two sorted arrays into a new, sorted array in

time.  In the provided file, complete the marked Binary Merge function using our pseudocode from class.  Note: Java and C# do not need to pass the length of an array as a parameter

function MERGE(int A[], int B[], int lenA, int lenB){
  int lenC = lenA + lenB;
  let C be a new array of length lenC;

  while(a < lenA && b < lenB){
    if(A[a] < B[b]) then C[c++] = A[a++];
    else C[C++] = B[b++];
  }

  while(a < lenA) do C[c++] = A[a++];
  while(b < lenB) do C[c++] = B[b++];

  return C;
}

If implemented correctly, this function should return a sorted array which contains the combined contents of both arrays.

Note: It is certainly possible to merge two arrays by other, less efficient methods.  Your program's complexity should be O(n).  If your program makes any extraneous memory allocations or has worse time complexity than O(n), you will only receive partial credit.  If your program uses a built-in function, library, or data structure, you will not receive any credit.

 
Part 2: Linked List Merge Sort (10 pts)

Performing a Merge Sort on a standard array is straightforward because we have random access (i.e. we can access A[i] for any valid index i).  However, Merge Sort can still be performed without random access.  The primary difference is that you must traverse the linked list in order to find the index of a given node.  While this might seem prohibitive at first, recall that you are allowed
complexity when merging two sorted halves- so we can afford

time within a recursive level of Merge Sort.  Given one extraneous memory allocation for a temporary array (whose length is equal to the size of the Linked List), we are able to Merge Sort a Linked List.

In the provided file, complete the marked Merge Sort function by following these steps:

    If 

, return (exit the function)
Compute
Assign a placeholder variable
Move the placeholder using a loop from
to such that points to the node at index
Recursively call
Recursively call
Initialize three variables:

While
and , do the following:

    If 

, do the following:

    Assign 

and move

Else, do the following:

    Assign 

and move

While
, do the following:

    Assign 

and move

While
, do the following:

    Assign 

and move

Reset
and assign a placeholder variable
While
, do the following:

    Set 

and move

If implemented correctly, the original linked list should now be sorted.

Note: You will not receive any credit for solutions which utilizing built-in functions to replace the above task.  The purpose of this exercise is to learn to program an algorithm manually without wasting unnecessary space.

 
Part 3: Common Elements (10 pts)

Given two sorted arrays, A and B, of lengths lenA and lenB, respectively, we want to find the elements which are shared by both A and B (without repeats).  For example, if
and then the shared array

.  Note that we can't know the number of elements that A and B will share beforehand, so C will have to be a dynamic array.

The naive solution to this problem is, for every element in A, scan all of B to verify if that element is shared.  Of course, this is
time complexity and a poor solution.  Alternatively, you could, for every element in A, perform a binary search on B to verify if that element is shared.  This has a better time complexity of or

(depending on which array is being linearly searched).  However, we can still do better...

Based on the intuition of binary merge, we can devise an

algorithm- which is optimal- by following these steps:

    Create a dynamic array 

Initialize variables
and
Use a while loop that runs as long as
and :

    If 

then increment
Else, if
then increment
Else, do the following:

    Add 

to
Increment
Skip all repeated occurrences of
in (hint: use another loop which increments as long as and

        )

Return

If implemented correctly, this function should return a dynamic array which contains all shared elements of
and

.  In the provided file, implement the common elements function using the aforementioned algorithm.

Note: Your program's complexity should be O(lenA+lenB).  If your program has the correct output but does so with a sub-optimal time complexity, you will only receive partial credit.  If your program uses a built-in function, library, or data structure* to replace the above task, you will not receive any credit.

*The List (C#), ArrayList (Java), and vector (C++) classes are permitted and encouraged.

 
Expected Output

Your program's output should match the following:

Part 1: Binary Merge
Merging:
[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]
With:
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
Result:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

Part 2: Linked List Merge Sort
Before:
16 -> 16 -> 15 -> 14 -> 9 -> 8 -> 21 -> 0 -> 7 -> 6 -> 7 -> 7 -> 9 -> 18 -> 1 -> 20 -> 24 -> 6 -> 19 -> 21 -> 7 -> 22 -> 17 -> 7 -> 14 -> null
After:
0 -> 1 -> 6 -> 6 -> 7 -> 7 -> 7 -> 7 -> 7 -> 8 -> 9 -> 9 -> 14 -> 14 -> 15 -> 16 -> 16 -> 17 -> 18 -> 19 -> 20 -> 21 -> 21 -> 22 -> 24 -> null

Part 3: Common Elements
Letterboxd/IMDB Consensus Top 37 Movies:
        1)      12 Angry Men
        2)      Apocalypse Now
        3)      Cinema Paradiso
        4)      City Lights
        5)      City of God
        6)      Come and See
        7)      Goodfellas
        8)      Grave of the Fireflies
        9)      Harakiri
        10)     High and Low
        11)     Inglourious Basterds
        12)     It's a Wonderful Life
        13)     Oldboy
        14)     Once Upon a Time in the West
        15)     One Flew Over the Cuckoo's Nest
        16)     Parasite
        17)     Paths of Glory
        18)     Psycho
        19)     Rear Window
        20)     Schindler's List
        21)     Seven Samurai
        22)     Spider-Man: Across the Spider-Verse
        23)     Spider-Man: Into the Spider-Verse
        24)     Spirited Away
        25)     Star Wars: Episode V - The Empire Strikes Back
        26)     Sunset Boulevard
        27)     The Dark Knight
        28)     The Godfather
        29)     The Godfather: Part II
        30)     The Good the Bad and the Ugly
        31)     The Lord of the Rings: The Fellowship of the Ring
        32)     The Lord of the Rings: The Return of the King
        33)     The Lord of the Rings: The Two Towers
        34)     The Pianist
        35)     The Shawshank Redemption
        36)     The Silence of the Lambs
        37)     Whiplash

 
Notes

    You can use any language between C#, Java, and C++.  No other languages will be accepted.
    Please ONLY submit your code files (.cs for C#, .java for Java, and .cpp and .h for C++).  DO NOT submit project files, executables, zip files, etc.
    Different datasets will be used to test your program, so do not hard-code any results.  Hard-coding any output will result in an automatic zero for that part.
    Tutors are available to help!  Check Canvas for their posted hours.
